// Generated by gencpp from file baumer_radar_msgs/RadarData.msg
// DO NOT EDIT!


#ifndef BAUMER_RADAR_MSGS_MESSAGE_RADARDATA_H
#define BAUMER_RADAR_MSGS_MESSAGE_RADARDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace baumer_radar_msgs
{
template <class ContainerAllocator>
struct RadarData_
{
  typedef RadarData_<ContainerAllocator> Type;

  RadarData_()
    : status(0)
    , confidence(0)
    , distance(0.0)
    , reserved()
    , velocity(0.0)  {
    }
  RadarData_(const ContainerAllocator& _alloc)
    : status(0)
    , confidence(0)
    , distance(0.0)
    , reserved(_alloc)
    , velocity(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _status_type;
  _status_type status;

   typedef int32_t _confidence_type;
  _confidence_type confidence;

   typedef float _distance_type;
  _distance_type distance;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _reserved_type;
  _reserved_type reserved;

   typedef float _velocity_type;
  _velocity_type velocity;





  typedef boost::shared_ptr< ::baumer_radar_msgs::RadarData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::baumer_radar_msgs::RadarData_<ContainerAllocator> const> ConstPtr;

}; // struct RadarData_

typedef ::baumer_radar_msgs::RadarData_<std::allocator<void> > RadarData;

typedef boost::shared_ptr< ::baumer_radar_msgs::RadarData > RadarDataPtr;
typedef boost::shared_ptr< ::baumer_radar_msgs::RadarData const> RadarDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::baumer_radar_msgs::RadarData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::baumer_radar_msgs::RadarData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::baumer_radar_msgs::RadarData_<ContainerAllocator1> & lhs, const ::baumer_radar_msgs::RadarData_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status &&
    lhs.confidence == rhs.confidence &&
    lhs.distance == rhs.distance &&
    lhs.reserved == rhs.reserved &&
    lhs.velocity == rhs.velocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::baumer_radar_msgs::RadarData_<ContainerAllocator1> & lhs, const ::baumer_radar_msgs::RadarData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace baumer_radar_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::baumer_radar_msgs::RadarData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::baumer_radar_msgs::RadarData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::baumer_radar_msgs::RadarData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::baumer_radar_msgs::RadarData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::baumer_radar_msgs::RadarData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::baumer_radar_msgs::RadarData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::baumer_radar_msgs::RadarData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "39955ca1f98a7669eaa59409eac1a196";
  }

  static const char* value(const ::baumer_radar_msgs::RadarData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x39955ca1f98a7669ULL;
  static const uint64_t static_value2 = 0xeaa59409eac1a196ULL;
};

template<class ContainerAllocator>
struct DataType< ::baumer_radar_msgs::RadarData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "baumer_radar_msgs/RadarData";
  }

  static const char* value(const ::baumer_radar_msgs::RadarData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::baumer_radar_msgs::RadarData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 status\n"
"int32 confidence\n"
"float32 distance\n"
"string reserved\n"
"float32 velocity\n"
;
  }

  static const char* value(const ::baumer_radar_msgs::RadarData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::baumer_radar_msgs::RadarData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.confidence);
      stream.next(m.distance);
      stream.next(m.reserved);
      stream.next(m.velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RadarData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::baumer_radar_msgs::RadarData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::baumer_radar_msgs::RadarData_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.status);
    s << indent << "confidence: ";
    Printer<int32_t>::stream(s, indent + "  ", v.confidence);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "reserved: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.reserved);
    s << indent << "velocity: ";
    Printer<float>::stream(s, indent + "  ", v.velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BAUMER_RADAR_MSGS_MESSAGE_RADARDATA_H
